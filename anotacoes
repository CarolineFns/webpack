Webpack soluciona esse problema das Single Page Applications.

Webpack permite dividir um bundle da aplicação em outros bundles menores que são carregados apenas quando forem utilizados pela aplicação, diminuindo assim o tempo de carregamento dessas aplicações e por conseguinte melhorando a experiência do usuário. 

<script src="dist/bundle.js"></script>

npm uninstall babel-cli --save-dev
npm uninstall systemjs --save

npm install webpack@3.1.0 babel-core@6.25.0 --save-dev

Nós desinstalamos o babel-cli e estamos este outro porque o Babel ainda será usado para a compilação dos arquivos.

o Terminal, digitamos o --save-dev, por se tratar de uma dependêcia de desenvolvimento. Usaríamos apenas --save por ser uma dependência em tempo de produção.

O babel-core nada mais é do que o núcleo do babel desprovido de sua linha de comando e que pode ser utilizado por outras ferramentas do mercado como Webpack.

Webpack dispensa a utilização de um module loader, justamente por criar em bundles em tempo de desenvolvimento, que nada mais são do que scripts que agregam outros módulos da aplicação.

o módulo que será carregado primeiramente é o app.js, e com a ajuda do Webpack, serão desenvolvidas as dependências do módulo

const path = require('path');

module.exports = {
    entry: './app-src/app.js',
    output: {
        filename: 'bundle.js',
        path: path.resolve(__dirname, 'dist')
    }
}  

entry - o ponto de entrada - e especificamos qual será o primeiro módulo carregado

output - onde será gravado o bundle do final, que será resolvido no módulo inicial. o Webpack vai procurar todas as dependências e resolverá isso por nós, gerando um grande arquivo no fim

no path do output, definiremos que ele é o resultado de path.resolve

__dirname - variável do NodeJS - informa qual a diretório do webpack.config

path.resolve() criará o caminho completo até a pasta dist, com base na pasta client

"build-dev": "webpack -p --config webpack.config.js"
 O Uglify, minificador embutido no webpack só teria problema caso o código fosse escrito em ESCMASCRIPT 2015 (ES6) ou superior.

npm install babili-webpack-plugin@0.1.1 --save-dev

Um build de desenvolvimento é mais rápido que um build de produção.

npm install cross-env@5.0.1 --save-dev
O módulo cross-env nos permite setar as variáveis de ambiente cross platform. 
    "build-prod": "cross-env NODE_ENV=production webpack  --config webpack.config.js"

npm install webpack-dev-server@2.5.1 --save-dev
O responsável por fazer o build do projeto será webpack-dev-server, que chamará o webpack.config.js.

"build-prod": "NODE_ENV=production webpack --config webpack.config.js"

Podemos usar o npm da própria plataforma Node.js para gerenciar as dependências de frontend da nossa aplicação. Nesse sentido, Webpack será o responsável pelo carregamento dessas dependências adicionando-as no bundle da aplicação.

para carregar CSS's de dependências frontend baixadas pelo npm, precisará tratá-los como módulos para então, no processo de build do Webpack, adicioná-lo no bundle.js da aplicação

npm install bootstrap@3.3.7 --save

app.js
import 'bootstrap/dist/css/bootstrap.css';
import 'bootstrap/dist/css/bootstrap-theme.css';
import 'css/meucss.css';

npm install css-loader@0.28.4 style-loader@0.18.2 --save-dev
npm install url-loader@0.5.9 file-loader@0.11.2 --save-dev

{ 
    test: /\.css$/, 
    loader: 'style-loader, css-loader' 
}


fouc =>(flash of unstyled content, ou seja, flash de um conteúdo não estilizado)
<link rel="stylesheet" href="dist/styles.css">
npm install extract-text-webpack-plugin@3.0.0 --save-dev

plugins.push(
    new extractTextPlugin("styles.css")
);

test: /\.css$/,
 use: extractTextPlugin.extract({
     fallback: 'style-loader',
     use: 'css-loader'
 })

npm install optimize-css-assets-webpack-plugin@2.0.0 --save-dev
npm install cssnano@3.10.0 --save-dev

const optimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin');

plugins.push(new optimizeCSSAssetsPlugin({
        cssProcessor: require('cssnano'),
        cssProcessorOptions: { 
            discardComments: {
                removeAll: true 
            }
        },
        canPrint: true
     }));  

Webpack Dev Server é um servidor capaz de ler as configurações de webpack.config.js ao ser carregado.
Webpack Dev server é baixado através do npm, pois é nada mais nada menos do que um módulo do Node.js.

Podemos importar scripts diretamente da pasta node_modules através da instrução import

npm install jquery@3.2.1 --save
import 'jquery/dist/jquery.js';
import 'bootstrap/js/modal.js

Correto. Um caso clássico é a dependência do jQuery pelo script do Bootstrap. O script do Bootstrap não o importa com a instrução import (até porque ele não foi criado por nós), mas o procura no escopo global. Por mais que tentemos importar o jQuery com a instrução import antes do script do Bootstrap, o jQuery estará isolado em uma closure por ter sido tratado como um módulo e isso não permitirá que ele seja acessível por outros script que dependem dele.

const webpack = require('webpack');
plugins.push(
    new webpack.ProvidePlugin({
           '$': 'jquery/dist/jquery.js',
           'jQuery': 'jquery/dist/jquery.js'
    })
);


